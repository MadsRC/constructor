package {{.PackageName}}

import (
	"log/slog"
)

type {{ .Name }} struct {
    options *{{lower_first_letter .Name}}Options
}

// New{{title .Name}} creates a new [{{.Name}}].
func New{{title .Name}}(options ...{{title .Name}}Option) (*{{.Name}}, error) {
	opts := default{{.Name}}Options
	for _, opt := range Global{{title .Name}}Options {
		opt.apply(&opts)
	}
	for _, opt := range options {
		opt.apply(&opts)
	}

	return &{{.Name}}{
		options: &opts,
	}, nil
}

type {{lower_first_letter .Name}}Options struct {
	Logger     *slog.Logger
}

var default{{title .Name}}Options = {{lower_first_letter .Name}}Options{
	Logger:  slog.Default(),
}

// Global{{title .Name}}Options is a list of [ClientOption]s that are applied to all [Client]s.
var Global{{title .Name}}Options []{{.Name}}Option

// {{.Name}}Option is an option for configuring a [{{.Name}}].
type {{.Name}}Option interface {
	apply(*{{lower_first_letter .Name}}Options)
}

// func{{.Name}}Option is a [{{.Name}}Option] that calls a function.
// It is used to wrap a function, so it satisfies the [{{.Name}}Option] interface.
type func{{.Name}}Option struct {
	f func(* {{lower_first_letter .Name}}Options)
}

func (fdo *func{{.Name}}Option) apply(opts *{{lower_first_letter .Name}}Options) {
	fdo.f(opts)
}

func newFunc{{.Name}}Option(f func(*{{lower_first_letter .Name}}Options)) *func{{.Name}}Option {
	return &func{{.Name}}Option{
		f: f,
	}
}

// With{{title .Name}}Logger returns a [{{.Name}}Option] that uses the provided logger.
func With{{title .Name}}Logger(logger *slog.Logger) {{.Name}}Option {
	return newFunc{{.Name}}Option(func(opts *{{lower_first_letter .Name}}Options) {
		opts.Logger = logger
	})
}
